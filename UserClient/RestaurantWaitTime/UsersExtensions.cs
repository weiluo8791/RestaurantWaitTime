// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using UserClient;
using UserClient.Models;

namespace UserClient
{
    public static partial class UsersExtensions
    {
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static User DeleteUserById(this IUsers operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUsers)s).DeleteUserByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<User> DeleteUserByIdAsync(this IUsers operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<UserClient.Models.User> result = await operations.DeleteUserByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        public static IList<string> GetAllUsers(this IUsers operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUsers)s).GetAllUsersAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<string>> GetAllUsersAsync(this IUsers operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<string>> result = await operations.GetAllUsersWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='userId'>
        /// Required.
        /// </param>
        public static User GetUserByUserid(this IUsers operations, string userId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUsers)s).GetUserByUseridAsync(userId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='userId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<User> GetUserByUseridAsync(this IUsers operations, string userId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<UserClient.Models.User> result = await operations.GetUserByUseridWithOperationResponseAsync(userId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='user'>
        /// Required.
        /// </param>
        public static User PostUserByUser(this IUsers operations, User user)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUsers)s).PostUserByUserAsync(user);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='user'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<User> PostUserByUserAsync(this IUsers operations, User user, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<UserClient.Models.User> result = await operations.PostUserByUserWithOperationResponseAsync(user, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='userId'>
        /// Required.
        /// </param>
        /// <param name='patch'>
        /// Required.
        /// </param>
        public static object PutUserByUseridAndPatch(this IUsers operations, string userId, string patch)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUsers)s).PutUserByUseridAndPatchAsync(userId, patch);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the UserClient.IUsers.
        /// </param>
        /// <param name='userId'>
        /// Required.
        /// </param>
        /// <param name='patch'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutUserByUseridAndPatchAsync(this IUsers operations, string userId, string patch, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutUserByUseridAndPatchWithOperationResponseAsync(userId, patch, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
