// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using RestaurantClient;
using RestaurantClient.Models;

namespace RestaurantClient
{
    public static partial class WaitTimesExtensions
    {
        /// <param name='operations'>
        /// Reference to the RestaurantClient.IWaitTimes.
        /// </param>
        /// <param name='restaurantId'>
        /// Required.
        /// </param>
        /// <param name='group'>
        /// Required.
        /// </param>
        public static WaitTime DeleteCurrentWaitTimeByRestaurantidAndGroup(this IWaitTimes operations, string restaurantId, int group)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWaitTimes)s).DeleteCurrentWaitTimeByRestaurantidAndGroupAsync(restaurantId, group);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the RestaurantClient.IWaitTimes.
        /// </param>
        /// <param name='restaurantId'>
        /// Required.
        /// </param>
        /// <param name='group'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<WaitTime> DeleteCurrentWaitTimeByRestaurantidAndGroupAsync(this IWaitTimes operations, string restaurantId, int group, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<RestaurantClient.Models.WaitTime> result = await operations.DeleteCurrentWaitTimeByRestaurantidAndGroupWithOperationResponseAsync(restaurantId, group, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the RestaurantClient.IWaitTimes.
        /// </param>
        /// <param name='restaurantId'>
        /// Required.
        /// </param>
        /// <param name='group'>
        /// Required.
        /// </param>
        public static WaitTime GetLatestRestaurantWaitTimeByGroupByRestaurantidAndGroup(this IWaitTimes operations, string restaurantId, int group)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWaitTimes)s).GetLatestRestaurantWaitTimeByGroupByRestaurantidAndGroupAsync(restaurantId, group);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the RestaurantClient.IWaitTimes.
        /// </param>
        /// <param name='restaurantId'>
        /// Required.
        /// </param>
        /// <param name='group'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<WaitTime> GetLatestRestaurantWaitTimeByGroupByRestaurantidAndGroupAsync(this IWaitTimes operations, string restaurantId, int group, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<RestaurantClient.Models.WaitTime> result = await operations.GetLatestRestaurantWaitTimeByGroupByRestaurantidAndGroupWithOperationResponseAsync(restaurantId, group, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the RestaurantClient.IWaitTimes.
        /// </param>
        /// <param name='restaurantId'>
        /// Required.
        /// </param>
        public static WaitTime GetLatestRestaurantWaitTimeByRestaurantid(this IWaitTimes operations, string restaurantId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWaitTimes)s).GetLatestRestaurantWaitTimeByRestaurantidAsync(restaurantId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the RestaurantClient.IWaitTimes.
        /// </param>
        /// <param name='restaurantId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<WaitTime> GetLatestRestaurantWaitTimeByRestaurantidAsync(this IWaitTimes operations, string restaurantId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<RestaurantClient.Models.WaitTime> result = await operations.GetLatestRestaurantWaitTimeByRestaurantidWithOperationResponseAsync(restaurantId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the RestaurantClient.IWaitTimes.
        /// </param>
        /// <param name='item'>
        /// Required.
        /// </param>
        public static WaitTime PostWaitTimeByItem(this IWaitTimes operations, WaitTime item)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWaitTimes)s).PostWaitTimeByItemAsync(item);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the RestaurantClient.IWaitTimes.
        /// </param>
        /// <param name='item'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<WaitTime> PostWaitTimeByItemAsync(this IWaitTimes operations, WaitTime item, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<RestaurantClient.Models.WaitTime> result = await operations.PostWaitTimeByItemWithOperationResponseAsync(item, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
